
//----------- DEMO ----------
type int myNumber = 0
type string myString = "Hello_World"
type char myChar = 'A'

label loopStart
    printLine(%i, *myNumber)
    ++ myNumber
    if (*myNumber != 10)
        jump(loopStart)
    endif

printLine(%s, *myString)

printLine(%c, *myChar)
++ myChar
printLine(%c, *myChar)
setVar(myNumber, 3)
printLine(%i, *myNumber)
//--------------------------

//---------else--------
type int myNumber = 1

printLine(%i, *myNumber)

if (*myNumber < 10)
    printLine(%s, "less than ten")
else
    printLine(%s, "greater than ten")
endif
//------------------

//-------extended if--------
type int myNumber = 7

extif(*myNumber > 10 || *myNumber < 5)
    printLine(%s, "correct")
else
    printLine(%s, "incorrect")
endif
//---------------


//---------var reassignment-------
type char myChar = 'A'
type int myInt = 123
type string myString = "Hello_World"

printLine(%c, *myChar)
setVar(myChar, 'C')
printLine(%c, *myChar)

printNewLine()

printLine(%i, *myInt)
setVar(myInt, 4567)
printLine(%i, *myInt)

printNewLine()

printLine(%s, *myString)
strcpy(myString, "Adios_Mundo")
printLine(%s, *myString)
//---------------------


//------functions and macros----
function jon {
    printLine(%c, 'A')
}

call jon

macro jon(c,n) {
    printLine(%c,c)
    printLine(%i,n)
}

jon('B',13)
//---------------------

//-------- SIMPLE MATH -----
type int x = 10
printLine(%i, ++ x)
addVar(x,9)
printLine(%i, x)
mulVar(x,5)
printLine(%i, x)
//---------------------

//--------ARRAYS-------
type string myStrings = "hello", "how", "are", "you"
type int myNumbers = 1, 2, 3, 4

printLine(%i, myNumbers[0])
printLine(%i, myNumbers[3])


type int readIndex = 0
label loopStart
    printLine(%s, myStrings[readIndex])
    ++ readIndex
    if(*readIndex < 4)
        jump(loopStart)
    endif

strcpy(myStrings[0], "Adios")
printLine(%s, myStrings[0])
//---------------------


//-------While Loops-------
type string shoppingList = "apple", "pear", "oranges", "grapes"

type int i = 0
while(i < arrayLength(shoppingList))
    printLine(%s, shoppingList[i])
    ++ i
endWhile
//---------------------

//-------More complex array read + write and better print functions-----
type string destination = "hello", "welcome", "bonjour", "whats up"
type string source = "adios", "bye", "goodbye", "later"

type int readIndex = 0
while(readIndex < arrayLength(destination)) 
    printf(%s, "COPYING: ")
    printf(%s, source[readIndex])
    printf(%s "INTO: ")
    printf(%s, destination[readIndex])

    strcpy(destination[readIndex], source[readIndex])

    printf(%s, "RESULT AT ADDRESS: ")
    printf(%s, destination[readIndex])

    printNewLine()

    ++ readIndex
endWhile

printLine(%s, "--done--")
//---------------------


//----evaluate demo-------
type int myNumber = 10
printf(%i, evaluate(myNumber x 10 + 50 / 3 / 2 ))
//---------------------

//----Full Program to calculate squares----
type int myNumbers = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21

type int index = 0
type int atIndex = 0
type int lastNumber = arrayLength(myNumbers)
-- lastNumber

printf(%s, "Program to calculate squares from: ")
printf(%i, myNumbers[0])
printf(%s, " to ")
printf(%i, myNumbers[lastNumber])

printNewLine()

while(index < arrayLength(myNumbers))
    intcpy(atIndex, myNumbers[index])
    printf(%i, myNumbers[index])
    printf(%s, " squared is ")
    printf(%i, evaluate(atIndex x atIndex))

    printNewLine()
    ++ index
endWhile

printLine(%s, "done!")
printLine(%s, "Program By: Nicolas Quijano - 2021")
//---------------------

//-----COMPLEX LONG PROGRAM SNAKE GAME------
# MAX_LENGTH_(NOT_INCLUDING_THE_HEAD)
const int snakeMaxLength = 9
type int snakeCurrentLength = 1
type int temporary = 0

# EACH_CELL_CONTAINS_A_POSSIBLE_STATE_FOR_THAT_SECTION_OF_THE_SNAKE 
type int snakeXPositions = 40, newFilledArray(int, -1, $snakeMaxLength)
type int snakeYPositions = 12, newFilledArray(int, -1, $snakeMaxLength)

# EACH_CELL_CONTAINS_HOW_LONG_THE_CELL_WILL_STAY_PRESENT_AT_THAT_SECTION
# THE_FIRST_CELL/HEAD_WILL_ALWAYS_STAY_PRESENT
type int snakeDuration = newFilledArray(int, 0, $snakeMaxLength)

# X_MOVEMENT_:_Y_MOVEMENT
type int snakeDirectionX = 1
type int snakeDirectionY = 0

# USED_FOR_LOOPING_THE_RENDER 
type int cellAtIteration = 0
type int currentSnakeCellX = 0
type int currentSnakeCellY = 0

# NUMBER_OF_FRAMES_RENDERED
type int renderedFrames = 0

type int incrementIndex = 0

# PRINT_INDIVIDUAL_PIXEL
macro printAtPos(xP,yP) {
    evaluate(yP x 80 + xP)
    printAddr(%c, 219, _mathResult)
}

macro printHeadAtPos(xP,yP) {
    evaluate(yP x 80 + xP)
    printAddr(%c, 002, _mathResult)
}

-------------------------------------------------------
# MAIN_RENDER_LOOP
while(renderedFrames > -1) 
    getKeyboardInput()

    if (*keyboard_out == KEY_UP)
        setVar(snakeDirectionX, 0)
        setVar(snakeDirectionY, -1)
    endif

    if (*keyboard_out == KEY_DOWN)
        setVar(snakeDirectionX, 0)
        setVar(snakeDirectionY, 1)
    endif

    if (*keyboard_out == KEY_LEFT)
        setVar(snakeDirectionX, -1)
        setVar(snakeDirectionY, 0)
    endif

    if (*keyboard_out == KEY_RIGHT)
        setVar(snakeDirectionX, 1)
        setVar(snakeDirectionY, 0)
    endif



    clearScreen
    call renderAndStep

    # Wait 
    sleep(0.5)
endWhile
-------------------------------------------------------

jump finish

# RENDER_FUNCTION:_EACH_CELL_IS_CHECKED_AND_DRAWN_IF_PRESENT
function renderAndStep {

    setVar(cellAtIteration, 0)

    # EDIT_POSITION_OF_HEAD
    intcpy(currentSnakeCellX, snakeXPositions[cellAtIteration]) 
    intcpy(currentSnakeCellY, snakeYPositions[cellAtIteration])
    addVars(currentSnakeCellX, snakeDirectionX)
    addVars(currentSnakeCellY, snakeDirectionY)
    intcpy(snakeXPositions[cellAtIteration], currentSnakeCellX)
    intcpy(snakeYPositions[cellAtIteration], currentSnakeCellY)

    printHeadAtPos(currentSnakeCellX, currentSnakeCellY)

    setVar(cellAtIteration, 1)
    while(cellAtIteration < $snakeMaxLength)
        if(snakeXPositions[cellAtIteration] != -1)
            intcpy(currentSnakeCellX, snakeXPositions[cellAtIteration])
            intcpy(currentSnakeCellY, snakeYPositions[cellAtIteration])

            # RENDER_CURRENT_CELL
            printAtPos(currentSnakeCellX, currentSnakeCellY)

            printAddr(%i, cellAtIteration, 400)
        endif
        ++ cellAtIteration
    endWhile
    
    if(*snakeCurrentLength < $snakeMaxLength)
        intcpy(snakeXPositions[snakeCurrentLength], snakeXPositions[0])
        intcpy(snakeYPositions[snakeCurrentLength], snakeYPositions[0])
        intcpy(snakeDuration[snakeCurrentLength], snakeCurrentLength)
        ++ snakeCurrentLength
    else 
        setVar(snakeCurrentLength, 1)
    endif
    

    printAddr(%i, snakeXPositions[0], 0)
    printAddr(%i, snakeYPositions[0], 80)
    printAddr(%i, snakeXPositions[1], 160)
    printAddr(%i, snakeYPositions[1], 240)
    printAddr(%i, snakeCurrentLength, 320)
    
}

label finish
//----------SNAKE GAME ENDS HERE
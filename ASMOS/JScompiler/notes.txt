add:

constants : done
char arrays




# MAX_LENGTH_(NOT_INCLUDING_THE_HEAD)
onst int snakeMaxLength = 9

# EACH_CELL_CONTAINS_A_POSSIBLE_STATE_FOR_THAT_SECTION_OF_THE_SNAKE 
type int snakeXPositions = 40, newFilledArray(int, -1, $snakeMaxLength)
type int snakeYPositions = 12, newFilledArray(int, -1, $snakeMaxLength)

# EACH_CELL_CONTAINS_HOW_LONG_THE_CELL_WILL_STAY_PRESENT_AT_THAT_SECTION
# THE_FIRST_CELL/HEAD_WILL_ALWAYS_STAY_PRESENT
type int snakeDuration = newFilledArray(int, 0, $snakeMaxLength)

# X_MOVEMENT_:_Y_MOVEMENT
type int snakeDirectionX = 1
type int snakeDirectionY = 0

# USED_FOR_LOOPING_THE_RENDER 
type int cellAtIteration = 0
type int currentSnakeCellX = 0
type int currentSnakeCellY = 0

# PRINT_INDIVIDUAL_PIXEL
macro printAtPos(xP,yP) {
    evaluate(yP x 80 + xP)
    printAddr(%c, 219, _mathResult)
}

# MAIN_RENDER_LOOP:_EACH_CELL_IS_CHECKED_AND_DRAWN_IF_PRESENT
function drawSnake {
    setVar(cellAtIteration, 0)

    while(cellAtIteration < $snakeMaxLength)
        if(snakeXPositions[cellAtIteration] != -1)
            intcpy(currentSnakeCellX, snakeXPositions[cellAtIteration])
            intcpy(currentSnakeCellY, snakeYPositions[cellAtIteration])

            # RENDER_CURRENT_CELL
            printAtPos(currentSnakeCellX, currentSnakeCellY)

            # MOVE_THE_CELL


            intcpy(currentSnakeCellX, evaluate())
            intcpy(snakeXPositions[cellAtIteration], evaluate(currentSnakeCellX + snakeDirectionX))
        endif
    endWhile
}

call drawSnake
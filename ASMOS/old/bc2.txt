# MAX_LENGTH_(NOT_INCLUDING_THE_HEAD)
const int snakeMaxLength = 20
type int snakeCurrentLength = 1 
# KEEP_AT_3
type int snakeRenderLength = 3 
type int temporary = 0

# FOOD_LOCATION
type int foodRead = 0
type int foodPositionsX = 10, 5, 20, 40, 65, 75
type int foodPositionsY = 5, 15, 10, 20, 3, 23
type int foodX = 10
type int foodY = 10

# EACH_CELL_CONTAINS_A_POSSIBLE_STATE_FOR_THAT_SECTION_OF_THE_SNAKE 
type int snakeXPositions = 40, newFilledArray(int, -1, $snakeMaxLength)
type int snakeYPositions = 12, newFilledArray(int, -1, $snakeMaxLength)

# EACH_CELL_CONTAINS_HOW_LONG_THE_CELL_WILL_STAY_PRESENT_AT_THAT_SECTION
# THE_FIRST_CELL/HEAD_WILL_ALWAYS_STAY_PRESENT
type int snakeDuration = newFilledArray(int, 0, $snakeMaxLength)

# X_MOVEMENT_:_Y_MOVEMENT
type int snakeDirectionX = 1
type int snakeDirectionY = 0

# USED_FOR_LOOPING_THE_RENDER 
type int cellAtIteration = 0
type int currentSnakeCellX = 0
type int currentSnakeCellY = 0

# NUMBER_OF_FRAMES_RENDERED
type int renderedFrames = 0

type int incrementIndex = 0

# PRINT_INDIVIDUAL_PIXEL
macro printAtPos(xP,yP) {
    evaluate(yP x 80 + xP)
    printAddr(%c, 219, _mathResult)
}

macro clearAtPos(xP,yP) {
    evaluate(yP x 80 + xP)
    printAddr(%c, 0, _mathResult)
}

macro printHeadAtPos(xP,yP) {
    evaluate(yP x 80 + xP)
    printAddr(%c, 002, _mathResult)
}

-------------------------------------------------------
# MAIN_RENDER_LOOP
while(renderedFrames > -1) 
    label continueFlow

    getKeyboardInput()

    if (*keyboard_out == KEY_UP)
        setVar(snakeDirectionX, 0)
        setVar(snakeDirectionY, -1)
    endif

    if (*keyboard_out == KEY_DOWN)
        setVar(snakeDirectionX, 0)
        setVar(snakeDirectionY, 1)
    endif

    if (*keyboard_out == KEY_LEFT)
        setVar(snakeDirectionX, -1)
        setVar(snakeDirectionY, 0)
    endif

    if (*keyboard_out == KEY_RIGHT)
        setVar(snakeDirectionX, 1)
        setVar(snakeDirectionY, 0)
    endif
    call renderAndStep

    # Wait 
    sleep(0.2)
endWhile
-------------------------------------------------------

jump finish

# RENDER_FUNCTION:_EACH_CELL_IS_CHECKED_AND_DRAWN_IF_PRESENT
function renderAndStep {

    printAtPos(foodX, foodY)

    setVar(cellAtIteration, 0)

    # EDIT_POSITION_OF_HEAD
    intcpy(currentSnakeCellX, snakeXPositions[cellAtIteration]) 
    intcpy(currentSnakeCellY, snakeYPositions[cellAtIteration])
    addVars(currentSnakeCellX, snakeDirectionX)
    addVars(currentSnakeCellY, snakeDirectionY)
    intcpy(snakeXPositions[cellAtIteration], currentSnakeCellX)
    intcpy(snakeYPositions[cellAtIteration], currentSnakeCellY)

    printHeadAtPos(currentSnakeCellX, currentSnakeCellY)

    setVar(cellAtIteration, 1)
    while(cellAtIteration < $snakeMaxLength)
        if(snakeXPositions[cellAtIteration] != -1)
            intcpy(currentSnakeCellX, snakeXPositions[cellAtIteration])
            intcpy(currentSnakeCellY, snakeYPositions[cellAtIteration])

            # RENDER_CURRENT_CELL
            printAtPos(currentSnakeCellX, currentSnakeCellY)

        endif
        ++ cellAtIteration
    endWhile

    intcpy(currentSnakeCellX, snakeXPositions[snakeCurrentLength]) 
    intcpy(currentSnakeCellY, snakeYPositions[snakeCurrentLength])
    clearAtPos(currentSnakeCellX, currentSnakeCellY)

    evaluate(snakeRenderLength - 1)
    if(*snakeCurrentLength < *_mathResult)
        intcpy(snakeXPositions[snakeCurrentLength], snakeXPositions[0])
        intcpy(snakeYPositions[snakeCurrentLength], snakeYPositions[0])
        intcpy(snakeDuration[snakeCurrentLength], snakeCurrentLength)
        ++ snakeCurrentLength
    else 
        intcpy(snakeXPositions[snakeCurrentLength],snakeXPositions[0])
        intcpy(snakeYPositions[snakeCurrentLength],snakeYPositions[0])
        setVar(snakeCurrentLength, 1)
    endif

    if(*foodRead > arrayLength(foodPositionsX)) 
        setVar(foodRead,0)
    endif
    
    extifDoubleVar(snakeXPositions[0] == *foodX && snakeYPositions[0] == *foodY)
        ++ snakeRenderLength
        intcpy(foodX, foodPositionsX[foodRead])
        intcpy(foodY, foodPositionsY[foodRead])
        ++ foodRead
    endif


    if(*snakeXPositions > 79)
        call lose
    endif
    if(*snakeXPositions < 0)
        call lose
    endif
    if(*snakeYPositions > 25)
        call lose
    endif
    if(*snakeYPositions < 0)
        call lose
    endif

    printAddr(%s, "Score", 0)
    evaluate(snakeRenderLength - 2)
    printAddr(%i, _mathResult, 80)
}

function lose {
    clearScreen
    printAddr(%s, "GAME OVER!", 993)
    printAddr(%s, "PRESS ENTER TO PLAY AGAIN", 1065)

    # RESET_TAIL
    setVar(currentSnakeCellX, -1)
    setVar(snakeCurrentLength, 0)
    while(snakeCurrentLength < $snakeMaxLength)
        staticIntCpy(snakeXPositions[snakeCurrentLength], -1)
        staticIntCpy(snakeYPositions[snakeCurrentLength], -1)
        ++ snakeCurrentLength
    endWhile

    while(*renderedFrames > -1) 
        getKeyboardInput()
        if(*keyboard_out == KEY_ENTER)
            # RESET_SCREEN_AND_HEAD
            setVar(snakeRenderLength, 3)
            setVar(currentSnakeCellX, 40)
            setVar(currentSnakeCellY, 12)
            staticIntCpy(snakeXPositions[0],40)
            staticIntCpy(snakeYPositions[0],12)
            clearScreen
            jump continueFlow
        endif
    endWhile
    endProgram
}

label finish